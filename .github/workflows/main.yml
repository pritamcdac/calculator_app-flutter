name: Flutter CI.
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-14

    env:
      FLUTTER_ROOT: /Users/runner/hostedtoolcache/flutter/stable-3.29.3-arm64
      PUB_CACHE: /Users/runner/.pub-cache

    steps:
      # ─────────────── Common Setup ───────────────
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v3

      - name: 🔧 Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.3'

      - name: 📦 Install dependencies
        run: flutter pub get

      - name: 🧪 Run tests with coverage
        run: flutter test --coverage

      - name: 📈 Install lcov (for genhtml)
        run: brew install lcov

      - name: 📝 Generate HTML coverage report
        run: genhtml coverage/lcov.info -o coverage/report

      - name: ☁️ Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/report

      # ─────────────── Android Build ───────────────
      - name: 🤖 Build APK
        run: flutter build apk --release

      - name: 🤖 Build AAB
        run: flutter build appbundle --release

      - name: ☁️ Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/app-release.apk

      - name: ☁️ Upload AAB artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-aab
          path: build/app/outputs/bundle/release/app-release.aab

      # ─────────────── iOS Code Signing & Manual IPA Export ───────────────
      - name: 🔑 Decode and import iOS certificate
        run: |
          echo "${{ secrets.IOS_CERTIFICATE_P12 }}" | base64 --decode > /tmp/certificate.p12
          security create-keychain -p "password" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "password" build.keychain
          security set-keychain-settings -lut 21600 build.keychain
          security import /tmp/certificate.p12 -k build.keychain -P "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign -A
          security list-keychains -s build.keychain login.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "password" build.keychain
          
      - name: 📃 Install provisioning profile
        run: |
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          echo "${{ secrets.IOS_PROVISIONING_PROFILE }}" | base64 --decode > "$HOME/Library/MobileDevice/Provisioning Profiles/CybageCI.mobileprovision"
      - name: 🔍 List code‑signing identities (debug)
        run: security find-identity -v -p codesigning

      - name: 📝 Generate ExportOptions.plist
        run: |
          cat > ios/ExportOptions.plist <<'EOF'
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>VB78Y67GX6</string>
              <key>provisioningProfiles</key>
              <dict>
                <key>com.cybage.alm</key>
                <string>CybageCI</string>
              </dict>
              <key>signingStyle</key>
              <string>manual</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>compileBitcode</key>
              <true/>
              <key>destination</key>
              <string>export</string>
            </dict>
          </plist>
          EOF
     
      - name: 📦 Set up CocoaPods and build
        run: |
               cd ios
               rm -rf Pods Podfile.lock
               pod install

      - name: 📦 Archive iOS app
        run: |
         xcodebuild \
         -workspace ios/Runner.xcworkspace \
         -scheme Runner \
         -configuration Release \
         -archivePath build/ios/archive/Runner.xcarchive \
         -destination "generic/platform=iOS" \
         CODE_SIGN_STYLE=Manual \
         DEVELOPMENT_TEAM=VB78Y67GX6 \
         PROVISIONING_PROFILE_SPECIFIER=CybageCI \
         CODE_SIGN_IDENTITY="Apple Distribution: CYBAGE SOFTWARE, INC. (VB78Y67GX6)" \
         OTHER_CODE_SIGN_FLAGS="--keychain /Users/runner/Library/Keychains/login.keychain-db" \
         archive

      - name: 📤 Export IPA manually
        run: |
          xcodebuild -exportArchive \
            -archivePath build/ios/archive/Runner.xcarchive \
            -exportOptionsPlist ios/ExportOptions.plist \
            -exportPath build/ios/ipa
      - name: ☁️ Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-ipa
          path: build/ios/ipa/*.ipa

      - name: 🔍 Verify IPA file exists
        run: |
         echo "Checking for IPA file..."
         if [ -f build/ios/ipa/calculator_app.ipa ]; then
         echo "✅ IPA file found."
         else
         echo "❌ IPA file not found. Exiting."
         exit 1
         fi
      
      - name: 📦 Install Fastlane
        run: |
         gem install fastlane -NV
         cd ios
        
      - name: 📝 Write AuthKey file safely
        run: |
          mkdir -p /Users/runner/private_keys
          echo "Writing private key to file..."
          printf "%s\n" "${{ secrets.APP_STORE_CONNECT_API_KEY }}" > /Users/runner/private_keys/AuthKey_JRENT3KZU0AE.p8
          echo "✅ Key file written at /Users/runner/private_keys/AuthKey_JRENT3KZU0AE.p8"
          ls -l /Users/runner/private_keys


      
      - name: Decode and write AuthKey to file
        run: |
         mkdir -p /Users/runner/private_keys
         echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 --decode > /Users/runner/private_keys/AuthKey_JRENT3KZU0AE.p8
      #   env:
      #    APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
      #    APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
      #    APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
      #   run: |
      #    cd ios
      #    fastlane beta
       
      - name: 🚀 Upload IPA to TestFlight
        run: |
            cd ios
            fastlane beta
        env:
           APP_STORE_CONNECT_API_KEY_ID: JRENT3KZU0AE
           APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
           APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
